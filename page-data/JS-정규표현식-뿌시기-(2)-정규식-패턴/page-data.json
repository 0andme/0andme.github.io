{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/JS-정규표현식-뿌시기-(2)-정규식-패턴/",
    "result": {"data":{"site":{"siteMetadata":{"title":"0andme.github.io"}},"markdownRemark":{"id":"37482a07-dfaa-537c-8498-2494fd591d78","excerpt":"이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다. 패턴 설명 ^ab 라인의 시작이 ab인 문자와 일치 ab$ 라인의 끝이 ab인 문자와 일치 . 임의의 한 문자와 일치 a | b a 또는 b와 일치 ab? b가 없거나 b와 일치 {n} n개 일치 {n,} n…","html":"<h4 class=\"title\"></h4>\n<div class=\"tab bottom10\"></div>\n<h5 class=\"title\"></h5>\n<p>이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다.</p>\n<h4 class=\"title\">정규 표현식 패턴 </h4>\n<table>\n<thead>\n<tr>\n<th>패턴</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^ab</td>\n<td>라인의 시작이 ab인 문자와 일치</td>\n</tr>\n<tr>\n<td>ab$</td>\n<td>라인의 끝이 ab인 문자와 일치</td>\n</tr>\n<tr>\n<td>.</td>\n<td>임의의 한 문자와 일치</td>\n</tr>\n<tr>\n<td>a | b</td>\n<td>a 또는 b와 일치</td>\n</tr>\n<tr>\n<td>ab?</td>\n<td>b가 없거나 b와 일치</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n개 일치</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n개 이상 일치</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>n개 이상 m개 이하 일치</td>\n</tr>\n</tbody>\n</table>\n<h4 class=\"title\">문자열이 특정 패턴으로 시작되는지 확인하기 <span class=\"bold\">^</span></h4>\n<div class=\"tab bottim10\">✤ 문자열이 ab로 시작하므로 ab 출력</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">abcdefg</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^ab</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//['ab',...중략]</span></code></pre></div>\n<div class=\"tab bottim10\">✤ '문자열이 \\n'으로 시작하므로 null 리턴</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nabcdefg\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^ab</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<div class=\"tab bottim10\">✤ m 옵션을 넣으면 '\\n'을 기준으로 하나의 라인별로 패턴을 검색함</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nabcdefg\nABCDEFG\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^ab</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gim</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['ab', 'AB' ]</span></code></pre></div>\n<h4 class=\"title\">문자열이 특정 패턴으로 끝나는지 확인하기 <span class=\"bold\">$</span></h4>\n<div class=\"tab bottim10\">✤ 문자열이 fg.으로 끝나므로 fg.출력</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">abcdefg.</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fg\\.$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//['fg.',...중략]</span></code></pre></div>\n<div class=\"tab bottim10\">✤ 문자열이 '\\n'으로 끝나므로 null 출력</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nabcdeFg.\nabcdefG.\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fg\\.$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//null</span></code></pre></div>\n<div class=\"tab bottim10\">✤ \\n을 기준으로 각 문자열의 라인이(m) 대소문자 상관없이(i) fg.으로 끝나는 모든 (g) fg.출력</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nabcdeFg.\nabcdefG.\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fg\\.$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gim</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[ 'Fg.', 'fG.' ]</span></code></pre></div>\n<ul>\n<li><a href=\"https://fastcampus.co.kr/dev_online_frontend\" target=\"_blank\">패스트 캠퍼스 강의</a></li>\n<li><a href=\"https://heropy.blog/2018/10/28/regexp/\" target=\"_blank\">강사님 블로그 | 정규표현식, 이렇게 시작하자!</a></li>\n</ul>","frontmatter":{"title":"정규 표현식 뿌시기 - (2) 정규식 패턴","date":"April 18, 2022","description":"정규 표현식 패턴 공부하기","categories":["Js"]}},"previous":{"fields":{"slug":"/JS-정규표현식-뿌시기-(1)-정규식-메소드/"},"frontmatter":{"title":"정규 표현식 뿌시기 - (1) 정규식 메소드"}},"next":null},"pageContext":{"id":"37482a07-dfaa-537c-8498-2494fd591d78","previousPostId":"80b493fd-1151-537c-867d-e3f7d125428b","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3284135133","4046992349"]}
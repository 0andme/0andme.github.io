{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/JS-정규표현식-뿌시기-(1)-정규식-메소드/",
    "result": {"data":{"site":{"siteMetadata":{"title":"0andme.github.io"}},"markdownRemark":{"id":"80b493fd-1151-537c-867d-e3f7d125428b","excerpt":"이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다. 정규 표현식 메소드 메소드 문법 설명 test 정규식.test(문자열) 일치여부(Boolean) 반환 match 문자열.match(정규식) 일치하는 문자열의 배열(Array) 반환 search 문자열.search…","html":"<p>이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다.</p>\n<h4>정규 표현식 메소드</h4>\n<table>\n<thead>\n<tr>\n<th>메소드</th>\n<th>문법</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>정규식.test(문자열)</td>\n<td>일치여부(Boolean) 반환</td>\n</tr>\n<tr>\n<td>match</td>\n<td>문자열.match(정규식)</td>\n<td>일치하는 문자열의 배열(Array) 반환</td>\n</tr>\n<tr>\n<td>search</td>\n<td>문자열.search(정규식)</td>\n<td>일치하는 문자열의 인덱스(Number) 반환</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>문자열.replace(정규식,대체문자)</td>\n<td>일치하는 문자열을 대체하고 대체된 문자열(String) 반환</td>\n</tr>\n<tr>\n<td>split</td>\n<td>문자열.split(정규식)</td>\n<td>일치하는 문자열을 분할하여 배열(Array)로 반환</td>\n</tr>\n</tbody>\n</table>\n<p>✤ test를 제외한 메소드는 <code class=\"language-text\">문자열.메소드</code>임을 기억하자</p>\n<h4>정규식.test(문자열)</h4>\n<div class=\"tab bottom10\">✤ 정규식을 만족하는 문자가 있는지 확인하기</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">red</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h4>문자열.match(정규식)</h4>\n<div class=\"tab bottom10\">✤ 문자열에서 정규식을 만족하는 문자배열 가져오기</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 'the', 'the', 'The' ]</span></code></pre></div>\n<h4>문자열.search(정규식)</h4>\n<div class=\"tab bottom10\">✤ 문자열에서 정규식을 만족하는 문자배열의 위치 찾기</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h4>문자열.replace(정규식,대체문자)</h4>\n<div class=\"tab bottom10\">✤ 문자열에서 정규식을 만족하는 문자를 대체문자로 바꾸기</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//AEmail@gmail.com</span>\n<span class=\"token comment\">// look at A sky</span>\n<span class=\"token comment\">// A quick brown fox</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// theEmail@gmail.com</span>\n<span class=\"token comment\">// look at the sky</span>\n<span class=\"token comment\">// The quick brown fox</span></code></pre></div>\n<p>위의 결과를 통해 <code class=\"language-text\">replace()</code>는 <strong>원본 문자열을 변형하지 않는다</strong>는 것을 알 수 있다.</p>\n<h4>문자열.split(정규식)</h4>\n<div class=\"tab bottom10\">✤ 정규식 기준으로 문자열 나누기</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   '\\n010-1234-5678\\n',</span>\n<span class=\"token comment\">//   'Email@gmail.com\\nlook at ',</span>\n<span class=\"token comment\">//   ' sky\\n',</span>\n<span class=\"token comment\">//   ' quick brown fox\\nabbcccddd\\n'</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<h4>참고 사이트</h4>\n<ul>\n<li><a href=\"https://fastcampus.co.kr/dev_online_frontend\" target=\"_blank\">패스트 캠퍼스 강의</a></li>\n<li><a href=\"https://heropy.blog/2018/10/28/regexp/\" target=\"_blank\">강사님 블로그 | 정규표현식, 이렇게 시작하자!</a></li>\n</ul>","frontmatter":{"title":"정규 표현식 뿌시기 - (1) 정규식 메소드","date":"April 18, 2022","description":"정규 표현식을 사용하는 메소드들 알아보기","categories":["Js"]}},"previous":{"fields":{"slug":"/JS-정규표현식-뿌시기-(0)- 정규식-생성/"},"frontmatter":{"title":"정규 표현식 뿌시기 - (0) 정규식 생성"}},"next":{"fields":{"slug":"/JS-정규표현식-뿌시기-(2)-정규식-패턴-1/"},"frontmatter":{"title":"정규 표현식 뿌시기 - (2) 정규식 패턴 - 1"}}},"pageContext":{"id":"80b493fd-1151-537c-867d-e3f7d125428b","previousPostId":"cc4e8fed-a645-5eaf-a4b4-aa78d68e822b","nextPostId":"f0b77fbb-53ea-54b0-8de8-397d1289b4ec"}},
    "staticQueryHashes": ["2841359383","3284135133","4046992349"]}
{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/js/정규표현식/정규표현식-뿌시기-(0)- 정규식-생성/",
    "result": {"data":{"site":{"siteMetadata":{"title":"0andme.github.io"}},"markdownRemark":{"id":"56986a4e-e958-5594-b775-a751d4263dae","excerpt":"…","html":"<p>이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다.</p>\n<h4 id=\"-정규-표현식-뿌시기\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%BF%8C%EC%8B%9C%EA%B8%B0\" aria-label=\" 정규 표현식 뿌시기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔨 정규 표현식 뿌시기</h4>\n<p><strong>정규표현식</strong>은 <strong>문자열을 검색하고 추출, 대체하는데 사용하는 일종의 패턴</strong>이다.<br>코딩테스트 공부를 하면서 문자열을 다룰 때 정규표현식을 이용하면 매우 쉽게 풀리는 문제들을 접하게 됐고, 나를 위해 정리하자는 마음으로 강의를 듣고 정리해볼 생각이다. 매번, “이거 정규표현식을 쓰면 될 것 같은데?” 라고 생각만 하고 정작 정확한 패턴을 쓸 줄 몰라 너무 힘들었다.</p>\n<h4 id=\"정규식-생성방식\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EC%83%9D%EC%84%B1%EB%B0%A9%EC%8B%9D\" aria-label=\"정규식 생성방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식 생성방식</h4>\n<ol>\n<li>생성자 방식 : new RegExp(‘표현’,‘옵션’)</li>\n<li>리터럴 방식 : /표현/옵션</li>\n</ol>\n<p>리터럴 방식이 더 간단하지만 생성자 함수를 사용해야만 하는 경우도 있을 수 있음을 기억하자</p>\n<h4 id=\"정규식의-역할\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"정규식의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식의 역할</h4>\n<ul>\n<li>문자 검색</li>\n<li>문자 대체</li>\n<li>문자 추출</li>\n</ul>\n<h4 id=\"정규식-연습\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EC%97%B0%EC%8A%B5\" aria-label=\"정규식 연습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식 연습</h4>\n<div class=\"tab bottom10\">✤ 정규표현식 테스트 사이트</div>\n<p><a href=\"https://regex101.com/\" target=\"_blank\">regex101.com/</a>\n<br>\n<a href=\"https://regexr.com/\" target=\"_blank\">regexr.com/</a>\n<br>\n<a href=\"https://regexper.com/\" target=\"_blank\">regexper.com/</a></p>\n<div class=\"tab bottom10\">✤ 특정 단어 모두 찾기 <span class='bold'>g</span> 옵션</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// 1. 생성자 방식</span>\n<span class=\"token keyword\">let</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the',...세부정보] // 결과 : 문자열 중 하나의 the에 대해서만 나온다</span>\n\nregexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the','the'] // 결과 : 문자열의 모든  the를 가져온다.</span>\n\n<span class=\"token comment\">// 2. 리터럴 방식</span>\n<span class=\"token keyword\">let</span> regexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nregexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"tab bottom10\">✤ 생성자 방식 | 특정 단어 대소문자 가리지 않고 모두 찾기  <span class='bold'>i</span> 옵션</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// 1. 생성자 방식</span>\n<span class=\"token keyword\">let</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the','the','The'] // 결과 : 대소문자 구분없이 모든 the에 대해서만 나온다</span>\n\n<span class=\"token comment\">// 2. 리터럴 방식</span>\n<span class=\"token keyword\">let</span> regexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"참고-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 사이트</h4>\n<ul>\n<li><a href=\"https://fastcampus.co.kr/dev_online_frontend\" target=\"_blank\">패스트 캠퍼스 강의</a></li>\n<li><a href=\"https://heropy.blog/2018/10/28/regexp/\" target=\"_blank\">강사님 블로그 | 정규표현식, 이렇게 시작하자!</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#-%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%BF%8C%EC%8B%9C%EA%B8%B0\">🔨 정규 표현식 뿌시기</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EC%83%9D%EC%84%B1%EB%B0%A9%EC%8B%9D\">정규식 생성방식</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9D%98-%EC%97%AD%ED%95%A0\">정규식의 역할</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EC%97%B0%EC%8A%B5\">정규식 연습</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\">참고 사이트</a></li>\n</ul>","frontmatter":{"title":"정규 표현식 뿌시기 - (0) 정규식 생성","date":"April 18, 2022","description":"정규 표현식에 익숙해지기","categories":["js"]}},"previous":{"fields":{"slug":"/js/string/string.repeat/"},"frontmatter":{"title":"String.repeat()"}},"next":{"fields":{"slug":"/js/정규표현식/정규표현식-뿌시기-(1)-정규식-메소드/"},"frontmatter":{"title":"정규 표현식 뿌시기 - (1) 정규식 메소드"}}},"pageContext":{"id":"56986a4e-e958-5594-b775-a751d4263dae","previousPostId":"28ad403a-166f-5afe-a58f-3ef9fa28c492","nextPostId":"d3c07bdd-2595-53c0-b33f-39aa74080137"}},
    "staticQueryHashes": ["2841359383","3284135133","4046992349"]}
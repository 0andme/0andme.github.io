{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/JS-정규표현식-뿌시기-(0)- 정규식-생성/",
    "result": {"data":{"site":{"siteMetadata":{"title":"0andme.github.io"}},"markdownRemark":{"id":"cc4e8fed-a645-5eaf-a4b4-aa78d68e822b","excerpt":"…","html":"<h4 class=\"title\"></h4>\n<div class=\"tab bottom10\"></div>\n<h5 class=\"title\"></h5>\n<p>이 글은 패스트 캠퍼스 강의 일부를 듣고 정리한 내용을 담고 있습니다.</p>\n<h4 class=\"title\">🔨 정규 표현식 뿌시기</h4>\n<p><strong>정규표현식</strong>은 <strong>문자열을 검색하고 추출, 대체하는데 사용하는 일종의 패턴</strong>이다.<br>코딩테스트 공부를 하면서 문자열을 다룰 때 정규표현식을 이용하면 매우 쉽게 풀리는 문제들을 접하게 됐고, 나를 위해 정리하자는 마음으로 강의를 듣고 정리해볼 생각이다. 매번, “이거 정규표현식을 쓰면 될 것 같은데?” 라고 생각만 하고 정작 정확한 패턴을 쓸 줄 몰라 너무 힘들었다.</p>\n<h4 class=\"title\">정규식 생성방식</h4>\n<ol>\n<li>생성자 방식 : new RegExp(‘표현’,‘옵션’)</li>\n<li>리터럴 방식 : /표현/옵션</li>\n</ol>\n<p>리터럴 방식이 더 간단하지만 생성자 함수를 사용해야만 하는 경우도 있을 수 있음을 기억하자</p>\n<h4 class=\"title\">정규식의 역할</h4>\n<ul>\n<li>문자 검색</li>\n<li>문자 대체</li>\n<li>문자 추출</li>\n</ul>\n<h4 class=\"title\">정규식 연습</h4>\n<div class=\"tab bottom10\">✤ 정규표현식 테스트 사이트</div>\n<p><a href=\"https://regex101.com/\" target=\"_blank\">regex101.com/</a>\n<br>\n<a href=\"https://regexr.com/\" target=\"_blank\">regexr.com/</a>\n<br>\n<a href=\"https://regexper.com/\" target=\"_blank\">regexper.com/</a></p>\n<div class=\"tab bottom10\">✤ 특정 단어 모두 찾기 <span class='bold'>g</span> 옵션</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// 1. 생성자 방식</span>\n<span class=\"token keyword\">let</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the',...중략] // 결과 : 문자열 중 하나의 the에 대해서만 나온다</span>\n\nregexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the','the'] // 결과 : 문자열의 모든  the를 가져온다.</span>\n\n<span class=\"token comment\">// 2. 리터럴 방식</span>\n<span class=\"token keyword\">let</span> regexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nregexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"tab bottom10\">✤ 생성자 방식 | 특정 단어 대소문자 가리지 않고 모두 찾기  <span class='bold'>i</span> 옵션</div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n010-1234-5678\ntheEmail@gmail.com\nlook at the sky\nThe quick brown fox\nabbcccddd\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// 1. 생성자 방식</span>\n<span class=\"token keyword\">let</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['the','the','The'] // 결과 : 대소문자 구분없이 모든 the에 대해서만 나온다</span>\n\n<span class=\"token comment\">// 2. 리터럴 방식</span>\n<span class=\"token keyword\">let</span> regexp2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">the</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 class=\"title\">참고 사이트</h5>\n<ul>\n<li><a href=\"https://fastcampus.co.kr/dev_online_frontend\" target=\"_blank\">패스트 캠퍼스 강의</a></li>\n<li><a href=\"https://heropy.blog/2018/10/28/regexp/\" target=\"_blank\">강사님 블로그 | 정규표현식, 이렇게 시작하자!</a></li>\n</ul>","frontmatter":{"title":"정규 표현식 뿌시기 - (0) 정규식 생성","date":"April 18, 2022","description":"정규 표현식에 익숙해지기","categories":["Js"]}},"previous":{"fields":{"slug":"/Gatsby로-블로그-만들기-(5)-카테고리 만들기/"},"frontmatter":{"title":"Gatsby로 블로그 만들기 - (5) 카테고리 만들기"}},"next":{"fields":{"slug":"/JS-정규표현식-뿌시기-(1)-정규식-패턴/"},"frontmatter":{"title":"정규 표현식 뿌시기 - (1) 정규식 패턴"}}},"pageContext":{"id":"cc4e8fed-a645-5eaf-a4b4-aa78d68e822b","previousPostId":"d6af6a97-b864-53a6-9ed6-15e310a9c842","nextPostId":"bbed4182-5aef-5c6a-9580-c85f669f9ca1"}},
    "staticQueryHashes": ["2841359383","3284135133","4046992349"]}